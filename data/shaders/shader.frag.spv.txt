shader.frag
// Module Version 10000
// Generated by (magic number): 80008
// Id's are bound by 23

                              Capability Shader
               2:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 5  "main" 10 18 22
                              ExecutionMode 5 OriginUpperLeft
               1:             String  "shader.frag"
                              Source GLSL 450 1  "// OpModuleProcessed client vulkan100
// OpModuleProcessed target-env vulkan1.0
// OpModuleProcessed entry-point main
#line 1
// Copyright 2016 Intel Corporation All Rights Reserved
// 
// Intel makes no representations about the suitability of this software for any purpose.
// THIS SOFTWARE IS PROVIDED ""AS IS."" INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES,
// EXPRESS OR IMPLIED, AND ALL LIABILITY, INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES,
// FOR THE USE OF THIS SOFTWARE, INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY
// RIGHTS, AND INCLUDING THE WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
// Intel does not assume any responsibility for any errors which may appear in this software
// nor any responsibility to update it.

#version 450

layout(set=0, binding=2) uniform sampler2D u_Texture;

layout(location = 0) in vec4 v_Color;
layout(location = 1) in vec2 v_Texcoord;

layout(location = 0) out vec4 o_Color;

void main() {
  o_Color = texture( u_Texture, v_Texcoord );
}
"
                              Name 5  "main"
                              Name 10  "o_Color"
                              Name 14  "u_Texture"
                              Name 18  "v_Texcoord"
                              Name 22  "v_Color"
                              Decorate 10(o_Color) Location 0
                              Decorate 14(u_Texture) DescriptorSet 0
                              Decorate 14(u_Texture) Binding 2
                              Decorate 18(v_Texcoord) Location 1
                              Decorate 22(v_Color) Location 0
               3:             TypeVoid
               4:             TypeFunction 3
               7:             TypeFloat 32
               8:             TypeVector 7(float) 4
               9:             TypePointer Output 8(fvec4)
     10(o_Color):      9(ptr) Variable Output
              11:             TypeImage 7(float) 2D sampled format:Unknown
              12:             TypeSampledImage 11
              13:             TypePointer UniformConstant 12
   14(u_Texture):     13(ptr) Variable UniformConstant
              16:             TypeVector 7(float) 2
              17:             TypePointer Input 16(fvec2)
  18(v_Texcoord):     17(ptr) Variable Input
              21:             TypePointer Input 8(fvec4)
     22(v_Color):     21(ptr) Variable Input
         5(main):           3 Function None 4
               6:             Label
                              Line 1 21 0
              15:          12 Load 14(u_Texture)
              19:   16(fvec2) Load 18(v_Texcoord)
              20:    8(fvec4) ImageSampleImplicitLod 15 19
                              Store 10(o_Color) 20
                              Return
                              FunctionEnd
